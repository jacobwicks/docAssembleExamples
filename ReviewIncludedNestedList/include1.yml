# Nested List
# With Review
# Fruits and Recipes
---
# define the objects
objects:
  # fruit is a repeating list of fruits
  # each fruit is a DAObject
  - fruit: |
      DAList.using(
        object_type=DAObject,
        complete_attribute='complete')
  # each fruit contains recipe
  # a repeating list of recipes
  # each recipe is a DAObject
  - fruit[i].recipe: |
      DAList.using(
        object_type=DAObject,
        complete_attribute='complete')
---
# Define complete fruit
code: |
  fruit[i].fruit
  fruit[i].color
  fruit[i].ripe
  # tell it to gather the recipes
  # before considering fruit to be complete 
  fruit[i].recipe.gather()
  fruit[i].complete = True
---
# Define complete recipe
code: |
  fruit[i].recipe[j].name
  fruit[i].recipe[j].type
  fruit[i].recipe[j].prep_time
  fruit[i].recipe[j].complete = True
---
# Have to ask if there are any fruit
# if yes, it will ask fruit questions
mandatory: true
question: |
  fruit
fields:
  - Got any fruit?: fruit.there_are_any
    datatype: yesnoradio
---
# this triggers asking fruit questions
mandatory: True
code: |
  if fruit.there_are_any:
    fruit.gather()
---
# ask about the fruit
question: |
  ${ capitalize(ordinal(i)) } Fruit :
fields:
  - What kind of fruit?: fruit[i].fruit
  - What color?: fruit[i].color
  - How ripe?: fruit[i].ripe
---
# if recipe.there_are_any
# it will gather recipes
question: Does ${ fruit[i].fruit } have any recipes?
yesno: fruit[i].recipe.there_are_any
---
# ask recipe questions
question: |
  What is the ${ fruit[i].fruit } ${ ordinal(j) } recipe?
fields:
  - Name: fruit[i].recipe[j].name
  - Type: fruit[i].recipe[j].type
  - Prep time: fruit[i].recipe[j].prep_time
---
# if there's another recipe
# it will ask more recipe questions
question: |
  Does ${ fruit[i].fruit } have any other recipes?
yesno: fruit[i].recipe.there_is_another
---
# if there's another fruit
# it will ask fruit questions
question: |
  Got any more fruit?
yesno: fruit.there_is_another
---
# this table displays the fruit
table: fruit.table
rows: fruit
columns:
  - Kind: |
      row_item.fruit
  - Color: |
      row_item.color
  - Ripeness: |
      row_item.ripe
  - Recipes: |
      len(row_item.recipe)
# need to edit at least one variable on each screen you want the user to see
# so, fruit, color, or ripe would work on their own
# need to call out recipe_review separately because it's on its own screen
edit:
  - fruit
  - color
  - ripe
  - recipe_review
---
# when you review a fruit
# this screen will display
# with the recipe table
question: |
  Here are the recipes for ${ fruit[i].fruit }.
subquestion: |
  ${ fruit[i].recipe.table }
continue button field: fruit[i].recipe_review
---
# define the recipe table
table: fruit[i].recipe.table
rows: fruit[i].recipe
columns:
  - Name: row_item.name
  - Type: row_item.type
  - Prep Time: row_item.prep_time
edit:
  - name
  - type
  - prep_time
